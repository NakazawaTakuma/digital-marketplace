"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-cjl@5h+duf7)!-guf5_k6l0je@!d(8y5$qgk5=on53!n@dh&z*"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
print(">>> DEBUG =", DEBUG)

# Application definition

INSTALLED_APPS = [
    'corsheaders',       
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'rest_framework',  # Django REST Framework
    'marketplace',     # 作成したアプリケーション

    'marketplace.users', 
    'marketplace.orders',
    'marketplace.products',  # ← ここが必須
    'marketplace.core',
    'marketplace.cart',

    'django_crontab',

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # ← 一番上に追加
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR/'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        'OPTIONS': {'min_length': 8},
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / 'staticfiles'



# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 開発時だけなら、全オリジン許可でも OK
# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173',   # Vite dev サーバー
    'http://127.0.0.1:8001',    # Django API を立ち上げたポート
]






# JWTベース認証-----------------------

INSTALLED_APPS += [
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',  # リフレッシュのブラックリスト管理を有効にする場合
]




REST_FRAMEWORK = {
    # ── 認証方式はそのまま Simple JWT ──
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

    # ── デフォルトのパーミッションクラスを設定 ──
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),

    # ── レンダラー設定を DEBUG に応じて切り替え ──
    'DEFAULT_RENDERER_CLASSES': (
        # レスポンスは JSON で返す
        'rest_framework.renderers.JSONRenderer',

        # 開発時のみブラウザブル UI を追加
        *(
            (
                'rest_framework.renderers.BrowsableAPIRenderer',
            )
            if DEBUG else ()
        ),
    ),

    # リクエストは JSON のみ受け付ける（必要に応じて）
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ),

    # エラーレスポンスを常にJSONで返す
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    'NON_FIELD_ERRORS_KEY': 'non_field_errors',
}





from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,          # リフレッシュ時に新しいリフレッシュトークンを発行
    'BLACKLIST_AFTER_ROTATION': True,       # 古いリフレッシュトークンをブラックリスト化
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# -----------------------------------


AUTHENTICATION_BACKENDS = [
    # まずカスタムバックエンドを先頭に
    'marketplace.users.backends.EmailOrUsernameModelBackend',
    # フォールバックで標準の ModelBackend
    'django.contrib.auth.backends.ModelBackend',
]



# メール設定
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Gmailの場合
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'tzero30208g@gmail.com'  # 実際のメールアドレス
EMAIL_HOST_PASSWORD = 'twfr wlfz lhlz kkhu'  # Gmailのアプリパスワード
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# URL
FRONTEND_URL = 'http://localhost:5173'  # 開発環境の場合
SITE_DOMAIN = 'http://127.0.0.1:8001'


AUTH_USER_MODEL = 'users.User'

PASSWORD_RESET_TIMEOUT = 60 * 60 * 24  # 86400 秒 = 24 時間


# ── django-crontab 用の設定 ──
CRONJOBS = [
    # 例：毎日午前2時に cleanup_pending_users を実行
    # ('0 2 * * *', 'django.core.management.call_command', ['cleanup_pending_users']),
    #
    # 例：6時間おきに実行したい場合（0 */6 * * *）
    ('0 */6 * * *', 'django.core.management.call_command', ['cleanup_pending_users']),
]

# 注意：
# - 第1引数の '0 */6 * * *' は「0分・6時間おき」のcron書式です（UTC or サーバーのローカルタイムに従います）。
# - 書式は「分 時 日 月 曜日」の順。たとえば、毎日深夜3時 → '0 3 * * *'。
# - その他のcron書式についてはお使いのサーバー環境に合わせて調整してください。



# 画像アップロード用
INSTALLED_APPS += [
    'django_cleanup.apps.CleanupConfig',  # 古いファイル削除用（optional）
]

# ─── メディアファイル用設定 ───────────────────────────────────────────
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
# ─────────────────────────────────────────────────────────────────────



